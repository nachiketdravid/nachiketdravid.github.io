{"version":3,"sources":["webpack:///./src/components/_shared/styled-separator.js","webpack:///./src/components/links/text-link.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/pages/tags.js"],"names":["StyledSeparator","styled","div","StyledTextLink","Link","flexCenter","TextLink","label","link","Fragment","to","icon","StyledH1","h1","StyledH2","h2","StyledTagsH1","StyledTagLinkContainer","flexWrap","StyledTagLink","TagsPage","group","data","allMarkdownRemark","alphabet","React","useState","split","existingTagsWithAlphabet","setExistingTagsWithAlphabet","tagCount","Object","values","length","useEffect","findExistingTags","forEach","char","regex","RegExp","filtered","filter","tag","test","fieldValue","map","tags","totalCount","elems","entries","key","toUpperCase","i","count","menuLinks","blogMenuLinks","title","pageQuery"],"mappings":"kTAEO,IAAMA,E,UAAkBC,EAAOC,IAAV,M,koBCIrB,IAAMC,EAAiBF,YAAOG,OAAPH,CAAH,IACvBI,KAsCWC,IAbE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACzB,OACE,kBAAC,IAAMC,SAAP,KACGF,GAASC,GACR,kBAACL,EAAD,CAAgBO,GAAIF,GAAc,KAC/BD,EACD,kBAAC,IAAD,CAAMI,KAAK,oB,o0BCpCd,IAAMC,EAAWX,IAAOY,GAAV,KAqBRC,EAAWb,IAAOc,GAAV,M,qfCVrB,IAAMC,EAAef,YAAOW,IAAPX,CAAH,KAGZgB,EAAyBhB,IAAOC,IAAV,IACxBgB,KAEEC,EAAgBlB,YAAOG,OAAPH,CAAH,KAgFJmB,UA5EE,SAAC,GAIX,IAFkBC,EAEnB,EAHJC,KACEC,kBAAqBF,MAGhBG,EAAYC,IAAMC,SAAS,6BAA6BC,MAAM,KADjE,KAE4DF,IAAMC,SAAS,IAAxEE,EAFH,KAE6BC,EAF7B,KAIEC,EAAWC,OAAOC,OAAOJ,GAA0BK,OAEzDR,IAAMS,WAAU,WACd,IAAIC,EAAmB,GACvBX,EAASY,SAAQ,SAACC,GAChB,IAAIC,EAAQ,IAAIC,OAAJ,IAAeF,EAAQ,KAC/BG,EAAWnB,EAAMoB,QAAO,SAACC,GAC3B,OAAOJ,EAAMK,KAAKD,EAAIE,eAGpBJ,EAASP,OAAS,IACpBE,EAAiBE,GAAQ,GACzBF,EAAiBE,GAAjB,KAAiCG,EAASK,KAAI,SAACC,GAAD,OAAUA,EAAKF,cAC7DT,EAAiBE,GAAjB,MAAkCG,EAASK,KAAI,SAACC,GAAD,OAAUA,EAAKC,kBAGlElB,EAA4BM,KAC3B,IAEH,IAAIa,EAAQjB,OAAOkB,QAAQrB,GAA0BiB,KAAI,YAAmB,IAAjBR,EAAgB,KAAVf,EAAU,KACzE,OACE,yBAAK4B,IAAKb,GACR,4BAAKA,EAAKc,eACV,kBAAClC,EAAD,KACGK,EAAKwB,KAAKD,KAAI,SAACH,EAAKU,GACnB,OACE,kBAACjC,EAAD,CAAe+B,IAAKR,EAAMU,EAAG1C,GAAE,SAAWgC,EAAX,KAC5BA,EACA,IAFH,IAEcpB,EAAK+B,MAAMD,GAFzB,aAWZ,OACE,kBAAC,IAAD,CAAQE,UAAWC,KACjB,kBAAC,IAAD,CAAKC,MAAM,SACX,kBAAC,IAAD,KACE,kBAACxC,EAAD,cAAqBc,EAArB,KACA,kBAAC,IAAD,MACCA,GAAYkB,EACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAUzC,MAAM,eAAeC,KAAK,SAyBrC,IAAMiD,EAAS","file":"component---src-pages-tags-js-c67005df75601c0a4d7c.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const StyledSeparator = styled.div`\r\n  height: 1px;\r\n  width: 100%;\r\n  margin-top: 3rem;\r\n  background-color: var(--body-color);\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport Icon from '../icon';\r\nimport { flexCenter } from './../_shared/styled-mixins';\r\n\r\nexport const StyledTextLink = styled(Link)`\r\n  ${flexCenter};\r\n  text-decoration: none;\r\n  font-size: 0.8rem;\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  padding: 0.4rem 0.8rem;\r\n  color: var(--primary-color);\r\n\r\n  &:hover {\r\n    color: var(--secondary-color);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  & > svg {\r\n    height: 0.8rem;\r\n    fill: currentColor;\r\n    margin-left: 0.25rem;\r\n    transition: margin-left var(--transition-fast) ease;\r\n  }\r\n\r\n  &:hover > svg {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TextLink = ({ label, link }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {label && link && (\r\n        <StyledTextLink to={link ? link : '#'}>\r\n          {label}\r\n          <Icon icon=\"arrow-right\" />\r\n        </StyledTextLink>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TextLink;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledH1 = styled.h1`\r\n  width: 100%;\r\n  position: relative;\r\n  font-weight: 800;\r\n  margin: 20px 0;\r\n\r\n  &:first-letter {\r\n    color: var(--primary-color);\r\n  }\r\n\r\n  &:after {\r\n    background-color: var(--primary-color);\r\n    content: '';\r\n    position: absolute;\r\n    top: -30px;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 2px;\r\n  }\r\n`;\r\n\r\nexport const StyledH2 = styled.h2`\r\n  color: var(--title-color);\r\n  margin: 20px 0;\r\n  position: relative;\r\n\r\n  &:after {\r\n    background-color: var(--primary-color);\r\n    content: '';\r\n    position: absolute;\r\n    top: -20px;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 2px;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { graphql, Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Layout from '../components/layout';\r\nimport TextLink from '../components/links/text-link';\r\nimport SEO from '../components/seo';\r\nimport { blogMenuLinks } from '../components/_config/menu-links';\r\nimport { StyledH1 } from '../components/_shared/styled-headings';\r\nimport { flexWrap } from '../components/_shared/styled-mixins';\r\nimport { StyledFullHeightSection } from '../components/_shared/styled-section';\r\nimport { StyledSeparator } from '../components/_shared/styled-separator';\r\n\r\nconst StyledTagsH1 = styled(StyledH1)`\r\n  margin-top: 3rem;\r\n`;\r\nconst StyledTagLinkContainer = styled.div`\r\n  ${flexWrap};\r\n`;\r\nconst StyledTagLink = styled(Link)`\r\n  margin: 0.8rem;\r\n`;\r\n\r\nconst TagsPage = ({\r\n  data: {\r\n    allMarkdownRemark: { group },\r\n  },\r\n}) => {\r\n  const [alphabet] = React.useState('abcdefghijklmnopqrstuvwxyz'.split(''));\r\n  const [existingTagsWithAlphabet, setExistingTagsWithAlphabet] = React.useState({});\r\n\r\n  const tagCount = Object.values(existingTagsWithAlphabet).length;\r\n\r\n  React.useEffect(() => {\r\n    let findExistingTags = {};\r\n    alphabet.forEach((char) => {\r\n      let regex = new RegExp(`^${char}`, 'i');\r\n      let filtered = group.filter((tag) => {\r\n        return regex.test(tag.fieldValue);\r\n      });\r\n\r\n      if (filtered.length > 0) {\r\n        findExistingTags[char] = {};\r\n        findExistingTags[char]['tags'] = filtered.map((tags) => tags.fieldValue);\r\n        findExistingTags[char]['count'] = filtered.map((tags) => tags.totalCount);\r\n      }\r\n    });\r\n    setExistingTagsWithAlphabet(findExistingTags);\r\n  }, []);\r\n\r\n  let elems = Object.entries(existingTagsWithAlphabet).map(([char, data]) => {\r\n    return (\r\n      <div key={char}>\r\n        <h3>{char.toUpperCase()}</h3>\r\n        <StyledTagLinkContainer>\r\n          {data.tags.map((tag, i) => {\r\n            return (\r\n              <StyledTagLink key={tag + i} to={`/tags/${tag}/`}>\r\n                {tag}\r\n                {'\\u00a0'}({data.count[i]})\r\n              </StyledTagLink>\r\n            );\r\n          })}\r\n        </StyledTagLinkContainer>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Layout menuLinks={blogMenuLinks}>\r\n      <SEO title=\"Tags\" />\r\n      <StyledFullHeightSection>\r\n        <StyledTagsH1>Tags ({tagCount})</StyledTagsH1>\r\n        <StyledSeparator />\r\n        {tagCount && elems}\r\n        <StyledSeparator />\r\n        <TextLink label=\"Take me home\" link=\"/\" />\r\n      </StyledFullHeightSection>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nTagsPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      group: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          fieldValue: PropTypes.string.isRequired,\r\n          totalCount: PropTypes.number.isRequired,\r\n        }).isRequired\r\n      ),\r\n    }),\r\n    site: PropTypes.shape({\r\n      siteMetadata: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n      }),\r\n    }),\r\n  }),\r\n};\r\nexport default TagsPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: \"/content/posts/\" }, frontmatter: { published: { eq: true } } }\r\n    ) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}