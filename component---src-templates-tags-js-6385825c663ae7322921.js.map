{"version":3,"sources":["webpack:///./src/components/links/text-link.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/templates/tags.js"],"names":["StyledTextLink","styled","Link","flexCenter","TextLink","label","link","Fragment","to","icon","StyledH1","h1","StyledH2","h2","StyledTagsLinkContainer","div","StyledTagsH1","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","menuLinks","blogMenuLinks","map","node","slug","fields","title","frontmatter","key","pageQuery"],"mappings":"4rBAMO,IAAMA,EAAiBC,YAAOC,OAAPD,CAAH,IACvBE,KAsCWC,IAbE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACzB,OACE,kBAAC,IAAMC,SAAP,KACGF,GAASC,GACR,kBAACN,EAAD,CAAgBQ,GAAIF,GAAc,KAC/BD,EACD,kBAAC,IAAD,CAAMI,KAAK,oB,o0BCpCd,IAAMC,EAAWT,IAAOU,GAAV,KAqBRC,EAAWX,IAAOY,GAAV,M,waCZrB,IAAMC,EAA0Bb,IAAOc,IAAV,IACzBZ,KAIEa,EAAef,YAAOS,IAAPT,CAAH,KAwDHgB,UApDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAS,mBAAsBD,EAAtB,SAAuD,IAAfA,EAAmB,GAAK,KAE/E,OACE,kBAAC,IAAD,CAAQE,UAAWC,KACjB,kBAAC,IAAD,KACE,kBAACV,EAAD,KAAeI,GACf,kBAACN,EAAD,KACE,kBAAC,IAAD,CAAUT,MAAM,gBAAgBC,KAAK,WAEvC,kBAAC,IAAD,KAAWkB,GACX,4BACGF,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACE,wBAAIE,IAAKJ,GACP,kBAAC,OAAD,CAAMrB,GAAE,QAAUqB,GAASE,WAmCpC,IAAMG,EAAS","file":"component---src-templates-tags-js-6385825c663ae7322921.js","sourcesContent":["import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport Icon from '../icon';\r\nimport { flexCenter } from './../_shared/styled-mixins';\r\n\r\nexport const StyledTextLink = styled(Link)`\r\n  ${flexCenter};\r\n  text-decoration: none;\r\n  font-size: 0.8rem;\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  padding: 0.4rem 0.8rem;\r\n  color: var(--primary-color);\r\n\r\n  &:hover {\r\n    color: var(--secondary-color);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  & > svg {\r\n    height: 0.8rem;\r\n    fill: currentColor;\r\n    margin-left: 0.25rem;\r\n    transition: margin-left var(--transition-fast) ease;\r\n  }\r\n\r\n  &:hover > svg {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TextLink = ({ label, link }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {label && link && (\r\n        <StyledTextLink to={link ? link : '#'}>\r\n          {label}\r\n          <Icon icon=\"arrow-right\" />\r\n        </StyledTextLink>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TextLink;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledH1 = styled.h1`\r\n  width: 100%;\r\n  position: relative;\r\n  font-weight: 800;\r\n  margin: 20px 0;\r\n\r\n  &:first-letter {\r\n    color: var(--primary-color);\r\n  }\r\n\r\n  &:after {\r\n    background-color: var(--primary-color);\r\n    content: '';\r\n    position: absolute;\r\n    top: -30px;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 2px;\r\n  }\r\n`;\r\n\r\nexport const StyledH2 = styled.h2`\r\n  color: var(--title-color);\r\n  margin: 20px 0;\r\n  position: relative;\r\n\r\n  &:after {\r\n    background-color: var(--primary-color);\r\n    content: '';\r\n    position: absolute;\r\n    top: -20px;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 2px;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { graphql, Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Layout from '../components/layout';\r\nimport TextLink from '../components/links/text-link';\r\nimport { blogMenuLinks } from '../components/_config/menu-links';\r\nimport { StyledH1, StyledH2 } from '../components/_shared/styled-headings';\r\nimport { flexCenter } from '../components/_shared/styled-mixins';\r\nimport { StyledFullHeightSection } from '../components/_shared/styled-section';\r\n\r\nconst StyledTagsLinkContainer = styled.div`\r\n  ${flexCenter};\r\n  width: 100%;\r\n  margin: 2.5rem 0;\r\n`;\r\nconst StyledTagsH1 = styled(StyledH1)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const tagHeader = `A collection of ${totalCount} post${totalCount === 1 ? '' : 's'}`;\r\n\r\n  return (\r\n    <Layout menuLinks={blogMenuLinks}>\r\n      <StyledFullHeightSection>\r\n        <StyledTagsH1>{tag}</StyledTagsH1>\r\n        <StyledTagsLinkContainer>\r\n          <TextLink label=\"View All Tags\" link=\"/tags\" />\r\n        </StyledTagsLinkContainer>\r\n        <StyledH2>{tagHeader}</StyledH2>\r\n        <ul>\r\n          {edges.map(({ node }) => {\r\n            const { slug } = node.fields;\r\n            const { title } = node.frontmatter;\r\n            return (\r\n              <li key={slug}>\r\n                <Link to={`blog/${slug}`}>{title}</Link>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </StyledFullHeightSection>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: {\r\n        fileAbsolutePath: { regex: \"/content/posts/\" }\r\n        frontmatter: { published: { eq: true }, tags: { in: [$tag] } }\r\n      }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}