{"version":3,"sources":["webpack:///./src/components/tech-list.js","webpack:///./src/components/links/text-link.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/components/_shared/styled-image-container.js","webpack:///./src/components/about.js","webpack:///./src/components/card-grid.js","webpack:///./src/components/contact.js","webpack:///./src/components/featured-projects.js","webpack:///./src/components/links/button-link.js","webpack:///./src/components/_shared/animation.js","webpack:///./src/components/scroll-indicator.js","webpack:///./src/components/hero.js","webpack:///./src/components/skewed-section.js","webpack:///./src/components/facts.js","webpack:///./src/components/recent-posts.js","webpack:///./src/pages/index.js","webpack:///./src/components/_shared/styled-content-link.js","webpack:///./src/components/_shared/styled-text-section.js"],"names":["StyledTechContainer","styled","section","StyledTag","span","TechList","techs","map","tech","key","icon","StyledTextLink","Link","flexCenter","TextLink","label","link","Fragment","to","StyledH1","h1","StyledH2","h2","StyledImageContainer","div","StyledStaticImageContainer","StyledAboutContainer","article","mq","gt","sm","StyledTextSection","About","data","frontmatter","title","about_image","html","image","childImageSharp","fluid","id","objectFit","dangerouslySetInnerHTML","__html","xs","p","StyledContactSection","StyledSection","StyledContainer","StyledFormContainer","StyledForm","StyledSeparator","StyledContacts","Contact","phone","email","address","StyledFeaturedProject","lt","md","StyledProjectInfoContainer","StyledDescription","contentBox","StyledLinkContainer","flexEnd","StyledArchiveContainer","FeaturedProjectsContainer","FeaturedProjects","featuredProjects","featured","project","index","coverImage","cover_image","demoLink","demo_link","repoLink","repo_link","demoLinkLabel","repoLinkLabel","aria-label","href","target","rel","hasHover","prefix","a","scroll","keyframes","StyledMouse","StyledScroller","StyledScrollText","ScrollIndicator","StyledHeroSection","StyledAuthor","StyledTagline","Hero","author","introduction","tagline","description","ctaLink","ctaLabel","StyledSkewedSection","SkewedSection","props","console","log","angle","className","children","defaultProps","query","Index","heroData","site","siteMetadata","hero","cta_label","cta_link","menuLinks","indexMenuLinks","about","nodes","contact","StyledContentLink"],"mappings":"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","file":"component---src-pages-index-js-4a95623292318cec4291.js","sourcesContent":["import styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Icon from './icon';\r\n\r\nconst StyledTechContainer = styled.section`\r\n  margin-top: 0.8rem;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\nconst StyledTag = styled.span`\r\n  display: flex;\r\n  align-items: center;\r\n  white-space: nowrap;\r\n  font-size: 0.8rem;\r\n\r\n  color: var(--body-color);\r\n  margin: 0 1rem 0.5rem 0;\r\n\r\n  & > svg {\r\n    color: var(--primary-color);\r\n    height: 0.8rem;\r\n    margin-right: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst TechList = ({ techs }) => {\r\n  return (\r\n    <StyledTechContainer>\r\n      {techs.map((tech) => (\r\n        <StyledTag key={tech}>\r\n          <Icon icon=\"caret-right\" />\r\n          {tech}\r\n        </StyledTag>\r\n      ))}\r\n    </StyledTechContainer>\r\n  );\r\n};\r\n\r\nTechList.propTypes = {\r\n  techs: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default TechList;\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport Icon from '../icon';\r\nimport { flexCenter } from './../_shared/styled-mixins';\r\n\r\nexport const StyledTextLink = styled(Link)`\r\n  ${flexCenter};\r\n  text-decoration: none;\r\n  font-size: 0.8rem;\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  padding: 0.4rem 0.8rem;\r\n  color: var(--primary-color);\r\n\r\n  &:hover {\r\n    color: var(--secondary-color);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  & > svg {\r\n    height: 0.8rem;\r\n    fill: currentColor;\r\n    margin-left: 0.25rem;\r\n    transition: margin-left var(--transition-fast) ease;\r\n  }\r\n\r\n  &:hover > svg {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TextLink = ({ label, link }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {label && link && (\r\n        <StyledTextLink to={link ? link : '#'}>\r\n          {label}\r\n          <Icon icon=\"arrow-right\" />\r\n        </StyledTextLink>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TextLink;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledH1 = styled.h1`\r\n  width: 100%;\r\n  position: relative;\r\n  font-weight: 800;\r\n  margin: 20px 0;\r\n\r\n  &:first-letter {\r\n    color: var(--primary-color);\r\n  }\r\n\r\n  &:after {\r\n    background-color: var(--primary-color);\r\n    content: '';\r\n    position: absolute;\r\n    top: -30px;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 2px;\r\n  }\r\n`;\r\n\r\nexport const StyledH2 = styled.h2`\r\n  color: var(--title-color);\r\n  margin: 20px 0;\r\n  position: relative;\r\n\r\n  &:after {\r\n    background-color: var(--primary-color);\r\n    content: '';\r\n    position: absolute;\r\n    top: -20px;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 2px;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledImageContainer = styled.div`\r\n  min-width: 300px;\r\n  min-height: 200px;\r\n  position: relative;\r\n\r\n  & .gatsby-image-wrapper * {\r\n    transition: transform var(--transition-fast) ease-in-out !important;\r\n  }\r\n\r\n  &:hover .gatsby-image-wrapper * {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const StyledStaticImageContainer = styled.div`\r\n  min-width: 300px;\r\n  min-height: 200px;\r\n  position: relative;\r\n\r\n  .gatsby-image-wrapper {\r\n    overflow: unset !important;\r\n  }\r\n\r\n  .gatsby-image-wrapper:before {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: -10px;\r\n    right: -10px;\r\n    width: 98%;\r\n    height: 98%;\r\n    border: 2px solid var(--primary-color);\r\n    transition: all ease var(--transition-fast);\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport Img from 'gatsby-image';\r\nimport React from 'react';\r\nimport TechList from './tech-list';\r\nimport { mq } from './_shared/media';\r\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\r\nimport { StyledStaticImageContainer } from './_shared/styled-image-container';\r\nimport { StyledSection } from './_shared/styled-section';\r\n\r\nconst StyledAboutContainer = styled.article`\r\n  /*  \r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  grid-gap: 2.5rem;\r\n  padding: 2.5rem 0;\r\n\r\n  ${mq.gt.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  */\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n`;\r\nconst StyledTextSection = styled.section`\r\n  white-space: pre-line;\r\n`;\r\n\r\nconst About = ({ data }) => {\r\n  const {\r\n    frontmatter: { title, techs, about_image },\r\n    html,\r\n  } = data;\r\n\r\n  const image = about_image ? about_image.childImageSharp.fluid : null;\r\n\r\n  return (\r\n    <StyledSection id=\"about\">\r\n      <StyledH1>About Me</StyledH1>\r\n      <StyledAboutContainer>\r\n        {image && (\r\n          <StyledStaticImageContainer>\r\n            <Img fluid={image} objectFit=\"contain\" />\r\n          </StyledStaticImageContainer>\r\n        )}\r\n        <div>\r\n          <StyledH2>{title}</StyledH2>\r\n          <StyledTextSection dangerouslySetInnerHTML={{ __html: html }} />\r\n          <TechList techs={techs} />\r\n        </div>\r\n      </StyledAboutContainer>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nAbout.propTypes = {};\r\n\r\nexport default About;\r\n","import styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Icon from './icon';\r\nimport { mq } from './_shared/media';\r\nimport { StyledH1 } from './_shared/styled-headings';\r\nimport { StyledSection } from './_shared/styled-section';\r\n\r\nconst StyledTextSection = styled.section`\r\n  white-space: pre-line;\r\n`;\r\nconst StyledFeatureGridContainer = styled.section`\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  grid-gap: 2.5rem;\r\n  margin-top: 2.5rem;\r\n  width: 100%;\r\n\r\n  ${mq.gt.xs} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  ${mq.gt.sm} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`;\r\nconst StyledFeatureCard = styled.article`\r\n  border: 1px solid var(--body-color);\r\n  border-radius: var(--radius);\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  min-height: 200px;\r\n  padding: 1rem;\r\n\r\n  & svg {\r\n    height: 2rem;\r\n    width: 2rem;\r\n    font-size: 2rem;\r\n  }\r\n`;\r\nconst StyledCardLabel = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin: 1rem 0;\r\n  color: var(--body-color);\r\n`;\r\nconst StyledDivider = styled.div`\r\n  width: 15%;\r\n  height: 2px;\r\n  background-color: var(--primary-color);\r\n  margin-bottom: 1rem;\r\n`;\r\nconst StyledFeatureDescription = styled.p`\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst CardGrid = ({ cards, description, title, id = null }) => {\r\n  const featureCards = cards.map(({ icon, prefix, label, description }, index) => {\r\n    return (\r\n      <StyledFeatureCard key={index}>\r\n        <Icon icon={icon} prefix={prefix} />\r\n        <StyledCardLabel>{label}</StyledCardLabel>\r\n        <StyledDivider></StyledDivider>\r\n        <StyledFeatureDescription>{description}</StyledFeatureDescription>\r\n      </StyledFeatureCard>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <StyledSection id={id}>\r\n      {title && <StyledH1>{title}</StyledH1>}\r\n      <StyledTextSection dangerouslySetInnerHTML={{ __html: description }} />\r\n      <StyledFeatureGridContainer>{featureCards}</StyledFeatureGridContainer>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nCardGrid.propTypes = {\r\n  cards: PropTypes.array.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default CardGrid;\r\n","import styled from '@emotion/styled';\r\nimport React from 'react';\r\nimport Icon from './icon';\r\nimport { mq } from './_shared/media';\r\nimport { StyledH1 } from './_shared/styled-headings';\r\nimport { StyledSection } from './_shared/styled-section';\r\n\r\nconst StyledContactSection = styled(StyledSection)`\r\n  margin-bottom: 70px;\r\n`;\r\nconst StyledContainer = styled.section`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & > svg {\r\n    font-size: 2rem;\r\n    margin-right: 0.75rem;\r\n  }\r\n`;\r\nconst StyledFormContainer = styled.section`\r\n  & > span {\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n  }\r\n`;\r\nconst StyledForm = styled.div`\r\n  color: var(--primary-color);\r\n\r\n  font-weight: normal;\r\n`;\r\nconst StyledTextSection = styled.section`\r\n  white-space: pre-line;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  margin-left: 3px;\r\n`;\r\nconst StyledSeparator = styled.div`\r\n  height: 1px;\r\n  width: 50%;\r\n  background-color: var(--body-color);\r\n`;\r\nconst StyledContacts = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  grid-gap: 30px;\r\n  width: 100%;\r\n  margin-top: 2rem;\r\n\r\n  ${mq.gt.xs} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  ${mq.gt.sm} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`;\r\n\r\nconst Contact = ({ data }) => {\r\n  const {\r\n    frontmatter: { phone, email, address },\r\n    html,\r\n  } = data;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledContactSection id=\"contact\">\r\n        <StyledH1>Contact Details</StyledH1>\r\n        <StyledTextSection dangerouslySetInnerHTML={{ __html: html }} />\r\n        <StyledSeparator />\r\n        <StyledContacts>\r\n          {/* {address && (\r\n            <StyledContainer>\r\n              <Icon icon=\"building\" />\r\n              <StyledFormContainer>\r\n                <StyledForm>Location</StyledForm>\r\n                <span>{address}</span>\r\n              </StyledFormContainer>\r\n            </StyledContainer>\r\n          )} */}\r\n          {email && (\r\n            <StyledContainer>\r\n              <Icon icon=\"paper-plane\" />\r\n              <StyledFormContainer>\r\n                <StyledForm>My E-Mail</StyledForm>\r\n                <span>{email}</span>\r\n              </StyledFormContainer>\r\n            </StyledContainer>\r\n          )}\r\n          {phone && (\r\n            <StyledContainer>\r\n              <Icon icon=\"mobile-alt\" />\r\n              <StyledFormContainer>\r\n                <StyledForm>Phone Number</StyledForm>\r\n                <span>{phone}</span>\r\n              </StyledFormContainer>\r\n            </StyledContainer>\r\n          )}\r\n        </StyledContacts>\r\n      </StyledContactSection>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import styled from '@emotion/styled';\r\nimport Img from 'gatsby-image';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Icon from './icon';\r\nimport TextLink from './links/text-link';\r\nimport TechList from './tech-list';\r\nimport { mq } from './_shared/media';\r\nimport { StyledContentLink } from './_shared/styled-content-link';\r\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\r\nimport { StyledImageContainer } from './_shared/styled-image-container';\r\nimport { contentBox, flexCenter, flexEnd } from './_shared/styled-mixins';\r\nimport { StyledSection } from './_shared/styled-section';\r\n\r\nconst StyledFeaturedProject = styled.article`\r\n  display: flex;\r\n  grid-gap: 2.5rem;\r\n  padding: 10px;\r\n  margin : 10px;\r\n  width: 90%;\r\n  height:auto;\r\n\r\n  ${mq.lt.md} {\r\n    flex-direction : column;\r\n  }\r\n\r\n  ${mq.sm} {\r\n    flex-direction : column;\r\n    width:60%;\r\n  }\r\n\r\n`;\r\n\r\nconst StyledProjectInfoContainer = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width:100%;\r\n`;\r\n\r\nconst StyledDescription = styled.section`\r\n  ${contentBox}\r\n  max-height: 180px;\r\n  padding: 10px;\r\n  overflow: auto;\r\n\r\n  ::-webkit-scrollbar-track {\r\n    border: 1px solid #000;\r\n    padding: 2px 0;\r\n    background-color: #404040;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n    height: 10px;\r\n  }\r\n\r\n\r\n  > p {\r\n    margin: 0;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst StyledLinkContainer = styled.section`\r\n  ${flexEnd};\r\n  margin: 10px 0;\r\n\r\n  & > a {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: var(--body-color);\r\n\r\n    &:hover {\r\n      color: var(--primary-color);\r\n    }\r\n  }\r\n\r\n  & svg {\r\n    margin: 0 0.5rem;\r\n  }\r\n`;\r\n\r\nconst StyledArchiveContainer = styled.div`\r\n  ${flexCenter};\r\n  width: 100%;\r\n  margin-top: 2.5rem;\r\n`;\r\n\r\nconst FeaturedProjectsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction : column;\r\n  align-items : center;\r\n  justify-content : center;\r\n  width: 100%;\r\n`;\r\n\r\nconst FeaturedProjects = ({ featured }) => {\r\n  const featuredProjects = featured.map((project, index) => {\r\n    const coverImage = project.frontmatter.cover_image ? project.frontmatter.cover_image.childImageSharp.fluid : null;\r\n\r\n    const title = project.frontmatter.title;\r\n    const demoLink = project.frontmatter.demo_link;\r\n    const repoLink = project.frontmatter.repo_link;\r\n    const demoLinkLabel = `featured project ${title} demo`;\r\n    const repoLinkLabel = `featured project ${title} repo`;\r\n\r\n    return (\r\n      <StyledFeaturedProject key={title + index}>\r\n        <a\r\n          aria-label={demoLink ? demoLinkLabel : repoLink ? repoLinkLabel : `featured project ${title}`}\r\n          href={demoLink ? demoLink : repoLink ? repoLink : '#'}\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n        >\r\n          {coverImage && (\r\n            <StyledImageContainer hasHover>\r\n              <Img fluid={coverImage} />\r\n            </StyledImageContainer>\r\n          )}\r\n        </a>\r\n        <StyledProjectInfoContainer>\r\n          <StyledContentLink href={demoLink ? demoLink : repoLink ? repoLink : '#'} target=\"_blank\" rel=\"noopener\">\r\n            <StyledH2>{title}</StyledH2>\r\n          </StyledContentLink>\r\n          <StyledDescription dangerouslySetInnerHTML={{ __html: project.html }} />\r\n          <TechList techs={project.frontmatter.techs} />\r\n          <StyledLinkContainer>\r\n            {repoLink && (\r\n              <a href={repoLink} target=\"_blank\" rel=\"noopener\" title=\"Repository Link\" aria-label={repoLinkLabel}>\r\n                <Icon icon=\"github\" prefix=\"fab\" />\r\n              </a>\r\n            )}\r\n            {demoLink && (\r\n              <a href={demoLink} target=\"_blank\" rel=\"noopener\" title=\"Demo Link\" aria-label={demoLinkLabel}>\r\n                <Icon icon=\"external-link-alt\" />\r\n              </a>\r\n            )}\r\n          </StyledLinkContainer>\r\n        </StyledProjectInfoContainer>\r\n      </StyledFeaturedProject>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <StyledSection id=\"projects\">\r\n      <StyledH1>Featured Projects</StyledH1>\r\n      <FeaturedProjectsContainer>{featuredProjects}</FeaturedProjectsContainer>\r\n      <StyledArchiveContainer>\r\n        <TextLink label=\"View More Projects\" link=\"/projects\" />\r\n      </StyledArchiveContainer>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nFeaturedProjects.propTypes = {\r\n  featured: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default FeaturedProjects;\r\n","import styled from '@emotion/styled';\r\nimport React from 'react';\r\nimport Icon from '../icon';\r\nimport { flexCenter } from './../_shared/styled-mixins';\r\n\r\nexport const StyledButtonLink = styled.a`\r\n  ${flexCenter};\r\n  text-decoration: none;\r\n  color: var(--bg-content-color) !important;\r\n  background-color: var(--title-color);\r\n  font-size: 0.9rem;\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  position: relative;\r\n  border: none;\r\n  padding: 0.4rem 0.8rem;\r\n\r\n  &:hover {\r\n    color: var(--primary-color) !important;\r\n  }\r\n\r\n  &:after {\r\n    content: '';\r\n    z-index: -1;\r\n    border: 1px solid var(--title-color);\r\n    position: absolute;\r\n    bottom: -3px;\r\n    right: -3px;\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: all ease var(--transition-fast);\r\n  }\r\n\r\n  &:hover:after {\r\n    border: 1px solid var(--primary-color);\r\n    bottom: -5px;\r\n    right: -5px;\r\n  }\r\n\r\n  & > svg {\r\n    fill: var(--bg-content-color);\r\n    height: 0.8rem;\r\n    margin-left: 0.25rem;\r\n  }\r\n\r\n  &:hover > svg {\r\n    fill: var(--primary-color);\r\n  }\r\n`;\r\n\r\nconst ButtonLink = ({ label, link }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {label && link && (\r\n        <StyledButtonLink href={link ? link : '#'} target=\"_blank\" rel=\"noopener\">\r\n          {label}\r\n          <Icon icon=\"arrow-right\" />\r\n        </StyledButtonLink>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ButtonLink;\r\n","import { keyframes } from '@emotion/core'\r\n\r\nexport const scroll = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n\r\n  10% {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n\r\n  100% {\r\n    transform: translateY(10px);\r\n    opacity: 0;\r\n  }\r\n`;","import styled from '@emotion/styled';\r\nimport React from 'react';\r\nimport { scroll } from './_shared/animation';\r\nimport { mq } from './_shared/media';\r\nimport { flexCenter } from './_shared/styled-mixins';\r\n\r\nconst StyledContainer = styled.div`\r\n  position: absolute;\r\n  bottom: 20px;\r\n  left: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  ${flexCenter};\r\n  flex-direction: column;\r\n\r\n  display: none;\r\n\r\n  ${mq.gt.xs} {\r\n    display: flex;\r\n  }\r\n`;\r\nconst StyledMouse = styled.div`\r\n  width: 20px;\r\n  height: 30px;\r\n  padding: 0 6px;\r\n  border: 2px solid #fff;\r\n  border-radius: 20px;\r\n`;\r\nconst StyledScroller = styled.div`\r\n  position: relative;\r\n  left: 50%;\r\n  top: 6px;\r\n  margin-left: -1px;\r\n  width: 2px;\r\n  height: 6px;\r\n  background: var(--primary-color);\r\n  border-radius: 25%;\r\n  animation-name: ${scroll};\r\n  animation-duration: 2.2s;\r\n  animation-timing-function: cubic-bezier(0.15, 0.41, 0.69, 0.94);\r\n  animation-iteration-count: infinite;\r\n`;\r\nconst StyledScrollText = styled.span`\r\n  font-size: 0.7rem;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst ScrollIndicator = () => {\r\n  return (\r\n    <StyledContainer>\r\n      <StyledScrollText>Scroll down</StyledScrollText>\r\n      <StyledMouse>\r\n        <StyledScroller />\r\n      </StyledMouse>\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nScrollIndicator.propTypes = {};\r\n\r\nexport default ScrollIndicator;\r\n","import styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport ButtonLink from './links/button-link';\r\nimport ScrollIndicator from './scroll-indicator';\r\nimport { mq } from './_shared/media';\r\nimport { StyledSection } from './_shared/styled-section';\r\n\r\nconst StyledHeroSection = styled(StyledSection)`\r\n  min-height: calc(100vh - 2 * var(--header-height));\r\n  position: relative;\r\n\r\n  ${mq.gt.sm} {\r\n    min-height: calc(100vh - var(--header-height));\r\n  }\r\n`;\r\nconst StyledIntroduction = styled.div`\r\n  color: var(--primary-color);\r\n  font-weight: normal;\r\n`;\r\nconst StyledAuthor = styled.h1`\r\n  margin-left: -4px !important;\r\n  font-size: 40px;\r\n  line-height: 1.1;\r\n  margin: 0;\r\n  word-break: break-word;\r\n\r\n  ${mq.gt.xs} {\r\n    font-size: 80px;\r\n  }\r\n`;\r\nconst StyledTagline = styled.h2`\r\n  margin-left: -4px !important;\r\n  font-size: 40px;\r\n  line-height: 1.1;\r\n  margin: 0;\r\n  color: var(--primary-color);\r\n  word-break: break-word;\r\n\r\n  ${mq.gt.xs} {\r\n    font-size: 80px;\r\n  }\r\n`;\r\nconst StyledDescription = styled.div`\r\n  margin-top: 0.5rem;\r\n  width: 100%;\r\n  max-width: 500px;\r\n`;\r\n\r\nconst Hero = ({ data }) => {\r\n  const { introduction, author, tagline, description, ctaLink, ctaLabel } = data;\r\n\r\n  return (\r\n    <StyledHeroSection>\r\n      {/* <StyledIntroduction>{introduction}</StyledIntroduction> */}\r\n      <StyledAuthor>{author}</StyledAuthor>\r\n      { <StyledTagline>{tagline}</StyledTagline> }\r\n      {/* <StyledDescription dangerouslySetInnerHTML={{ __html: description }} /> */}\r\n      {/* <ButtonLink label={ctaLabel} link={ctaLink} /> */}\r\n      <ScrollIndicator />\r\n    </StyledHeroSection>\r\n  );\r\n};\r\n\r\nHero.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Hero;\r\n","import styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst skewNumber = 0.09719;\r\nconst StyledSkewedSection = styled.section`\r\n  margin: 6rem 0;\r\n  position: relative;\r\n  padding: calc(100% * ${skewNumber}) 0;\r\n\r\n  & > .content {\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 1.5em;\r\n    position: relative;\r\n    \r\n    /* uncomment for debuggind purposes */\r\n    /* border: 2px dashed #fff8; */\r\n  }\r\n\r\n  &:after {\r\n    content: '';\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: -1;\r\n    transform: skewy(-11deg);\r\n    transform-origin: 50% 0;\r\n    outline: 1px solid transparent;\r\n    backface-visibility: hidden;\r\n    background-color: var(--bg-content-color);\r\n  }\r\n`;\r\n\r\n// x = tan(α) * a / 2\r\n\r\nconst SkewedSection = (props) => {\r\n  console.log('angle', props.angle);\r\n\r\n  return (\r\n    <StyledSkewedSection>\r\n      <div className=\"content\">{props.children}</div>\r\n    </StyledSkewedSection>\r\n  );\r\n};\r\n\r\nSkewedSection.propTypes = {\r\n  angle: PropTypes.number,\r\n};\r\n\r\nSkewedSection.defaultProps = {\r\n  angle: 10,\r\n};\r\n\r\nexport default SkewedSection;\r\n","import styled from '@emotion/styled';\r\nimport React from 'react';\r\nimport StyledSkewedSection from './skewed-section';\r\nimport { StyledH1 } from './_shared/styled-headings';\r\n\r\nconst StyledLogoSection = styled.section`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst StyledFactNumber = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 1rem;\r\n\r\n  & > .number {\r\n    margin-left: 2rem;\r\n    margin-bottom: 1rem;\r\n    font-size: 2rem;\r\n    font-weight: bold;\r\n  }\r\n\r\n  & > .fact {\r\n    position: relative;\r\n    text-transform: uppercase;\r\n    font-size: 0.8rem;\r\n    padding: 0.5rem 1rem;\r\n    background-color: var(--bg-color);\r\n    margin-left: 2rem;\r\n\r\n    &:before {\r\n      content: '';\r\n      position: absolute;\r\n      top: 50%;\r\n      left: -2rem;\r\n      width: 1rem;\r\n      height: 2px;\r\n      background-color: var(--primary-color);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Facts = () => {\r\n  return (\r\n    <StyledSkewedSection angle={10}>\r\n      <StyledH1>Some Interesting Facts</StyledH1>\r\n      <StyledLogoSection>\r\n        <StyledFactNumber>\r\n          <span className=\"number\">127</span>\r\n          <span className=\"fact\">Finished Projects</span>\r\n        </StyledFactNumber>\r\n        <StyledFactNumber>\r\n          <span className=\"number\">321</span>\r\n          <span className=\"fact\">Happy Customers</span>\r\n        </StyledFactNumber>\r\n        <StyledFactNumber>\r\n          <span className=\"number\">863</span>\r\n          <span className=\"fact\">Freelancing Hours</span>\r\n        </StyledFactNumber>\r\n      </StyledLogoSection>\r\n    </StyledSkewedSection>\r\n  );\r\n};\r\n\r\nexport default Facts;\r\n","import styled from '@emotion/styled';\r\nimport { Link } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport TextLink from './links/text-link';\r\nimport TagList from './tag-list';\r\nimport { mq } from './_shared/media';\r\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\r\nimport { StyledImageContainer } from './_shared/styled-image-container';\r\nimport { flexCenter } from './_shared/styled-mixins';\r\nimport { StyledSection } from './_shared/styled-section';\r\nimport { StyledTextSection } from './_shared/styled-text-section';\r\n\r\nconst StyledPostsContainer = styled.article`\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  grid-gap: 2.5rem;\r\n  margin-top: 2.5rem;\r\n\r\n  ${mq.gt.xs} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`;\r\nconst StyledPostContainer = styled.article`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: var(--radius);\r\n\r\n  & .gatsby-image-wrapper {\r\n    max-height: 300px;\r\n  }\r\n`;\r\nconst StyledDateOverlay = styled.div`\r\n  pointer-events: none;\r\n  z-index: 1;\r\n  position: absolute;\r\n  top: 0.5rem;\r\n  left: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  height: 3rem;\r\n  width: 3rem;\r\n  color: var(--title-color);\r\n  background: var(--bg-code);\r\n  align-items: center;\r\n  border-radius: var(--radius);\r\n  font-weight: 500;\r\n  line-height: 1rem;\r\n`;\r\nconst StyledTitleLink = styled(Link)`\r\n  text-decoration: none;\r\n\r\n  &:hover h2 {\r\n    color: var(--primary-color);\r\n  }\r\n`;\r\nconst StyledBlogLinkContainer = styled.div`\r\n  ${flexCenter};\r\n  width: 100%;\r\n  margin-top: 2.5rem;\r\n`;\r\nconst StyledPostText = styled(StyledTextSection)`\r\n  > p {\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 4;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst RecentPosts = ({ data }) => {\r\n  const recentPosts = data.map((post) => {\r\n    const { title, tags, description, date } = post.node.frontmatter;\r\n    const coverImage = post.node.frontmatter.cover_image\r\n      ? post.node.frontmatter.cover_image.childImageSharp.fluid\r\n      : null;\r\n\r\n    const link = `/blog` + post.node.fields.slug;\r\n\r\n    const month = new Date(date).toLocaleDateString('en-EN', { month: 'short' });\r\n    const day = new Date(date).toLocaleDateString('en-EN', { day: '2-digit' });\r\n\r\n    return (\r\n      <StyledPostContainer key={title}>\r\n        <StyledDateOverlay>\r\n          <span>{month}</span>\r\n          <span>{day}</span>\r\n        </StyledDateOverlay>\r\n        <Link to={link} aria-label={`recent post ${title}`}>\r\n          <StyledImageContainer>{coverImage && <Img fluid={coverImage} />}</StyledImageContainer>\r\n        </Link>\r\n        <TagList tags={tags} />\r\n        <StyledTitleLink to={link}>\r\n          <StyledH2>{title}</StyledH2>\r\n        </StyledTitleLink>\r\n        <StyledPostText>\r\n          <p>{description}</p>\r\n        </StyledPostText>\r\n      </StyledPostContainer>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <StyledSection id=\"blog\">\r\n      <StyledH1>Latest Blog Posts</StyledH1>\r\n      <StyledPostsContainer>{recentPosts}</StyledPostsContainer>\r\n      <StyledBlogLinkContainer>\r\n        <TextLink label=\"View All Posts\" link=\"/blog\" />\r\n      </StyledBlogLinkContainer>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nRecentPosts.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default RecentPosts;\r\n","import { graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport About from '../components/about';\r\nimport CardGrid from '../components/card-grid';\r\nimport Contact from '../components/contact';\r\nimport FeaturedProjects from '../components/featured-projects';\r\nimport Hero from '../components/hero';\r\nimport Facts from '../components/facts';\r\nimport Layout from '../components/layout';\r\nimport RecentPosts from '../components/recent-posts';\r\nimport SEO from '../components/seo';\r\nimport { indexMenuLinks } from '../components/_config/menu-links';\r\n\r\nconst Index = ({ data }) => {\r\n  const heroData = {\r\n    author: data.site.siteMetadata.author,\r\n    tagline: data.hero.frontmatter.tagline,\r\n    description: data.hero.html,\r\n    introduction: data.hero.frontmatter.introduction,\r\n    ctaLabel: data.hero.frontmatter.cta_label,\r\n    ctaLink: data.hero.frontmatter.cta_link,\r\n  };\r\n\r\n  return (\r\n    <Layout menuLinks={indexMenuLinks}>\r\n      <SEO title=\"Home\" />\r\n      <Hero data={heroData} />\r\n      {/* <Facts/> */}\r\n      <About data={data.about} />\r\n      {/* { <CardGrid cards={data.cards.frontmatter.cards} description={data.cards.html} title=\"Our Features\" id=\"features\" /> } */}\r\n      <FeaturedProjects featured={data.featuredProjects.nodes} />\r\n      {/* <RecentPosts data={data.blog.edges} /> */}\r\n      <Contact data={data.contact} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nIndex.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Index;\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      siteMetadata {\r\n        author\r\n      }\r\n    }\r\n\r\n    hero: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/hero/\" }) {\r\n      frontmatter {\r\n        introduction\r\n        tagline\r\n        cta_label\r\n        cta_link\r\n      }\r\n      html\r\n    }\r\n\r\n    about: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/about/\" }) {\r\n      frontmatter {\r\n        title\r\n        techs\r\n        about_image {\r\n          childImageSharp {\r\n            fluid(maxWidth: 800) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }\r\n      html\r\n    }\r\n\r\n    cards: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/cards/\" }) {\r\n      frontmatter {\r\n        cards {\r\n          label\r\n          icon\r\n          prefix\r\n          description\r\n        }\r\n      }\r\n      html\r\n    }\r\n\r\n    featuredProjects: allMarkdownRemark(\r\n      limit: 3\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: { fileAbsolutePath: { regex: \"/content/projects/\" }, frontmatter: { featured: { eq: true } } }\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          date(formatString: \"D MMMM, YYYY\")\r\n          title\r\n          repo_link\r\n          demo_link\r\n          techs\r\n          cover_image {\r\n            childImageSharp {\r\n              fluid(maxWidth: 800) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n        html\r\n      }\r\n    }\r\n\r\n    blog: allMarkdownRemark(\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      limit: 4\r\n      filter: { fileAbsolutePath: { regex: \"/content/posts/\" }, frontmatter: { published: { ne: false } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            tags\r\n            date(formatString: \"D MMMM, YYYY\")\r\n            description\r\n            cover_image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 800) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    contact: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/contact/\" }) {\r\n      frontmatter {\r\n        phone\r\n        email\r\n        address\r\n      }\r\n      html\r\n    }\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledContentLink = styled.a`\r\n  text-decoration: none;\r\n\r\n  &:hover > * {\r\n    cursor: pointer;\r\n    color: var(--primary-color);\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\nimport { contentBox } from './styled-mixins';\r\n\r\nexport const StyledTextSection = styled.section`\r\n  white-space: pre-line;\r\n  ${contentBox}\r\n  max-height: 180px;\r\n  padding: 10px;\r\n  max-width : 95%;\r\n  overflow: auto;\r\n\r\n  ::-webkit-scrollbar-track {\r\n    border: 1px solid #000;\r\n    padding: 2px 0;\r\n    background-color: #404040;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n    height: 10px;\r\n  }\r\n\r\n  > p {\r\n    margin: 0;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n"],"sourceRoot":""}